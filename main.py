import sqlite3
from sqlite3 import Error
import keyboards as kb
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor, exceptions
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import CallbackQuery
from config import token,admins
import random
import time
import db

TOKEN = token
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot,storage = MemoryStorage())

class anketa(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()


class zanketa(StatesGroup):
    z1 = State()
    z2 = State()
    z3 = State()
    z4 = State()
    z5 = State()
    z6 = State()
    z7 = State()

class mailing(StatesGroup):
    text = State()

class banl(StatesGroup):
    nick = State()

class advent(StatesGroup):
    atext = State()

with sqlite3.connect("database.db") as conn:
  cursor = conn.cursor()
  cursor.execute("""
  CREATE TABLE IF NOT EXISTS acquaintances
  (user_id INTEGER,user_name TEXT,user_number TEXT,age INTEGER,gender TEXT,activity TEXT,about TEXT,whom_is_he_looking)
  """)
  cursor.execute("""
  CREATE TABLE IF NOT EXISTS find_job
  (user_id INTEGER,user_name TEXT,user_number TEXT,age TEXT,gender TEXT,activity TEXT,what_wants TEXT,devote_time TEXT,earn_money TEXT,telegram TEXT)
  """)
  cursor.execute("""
  CREATE TABLE IF NOT EXISTS users
  (user_id INTEGER,user_name TEXT)
  """)
  cursor.execute("""
  CREATE TABLE IF NOT EXISTS banlist
  (user_id INTEGER,user_name TEXT)
  """)
  cursor.execute("""
  CREATE TABLE IF NOT EXISTS ad
  (id INTEGER,text TEXT)
  """)
  


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    cursor.execute("select * from users where user_id = ?",(message.from_user.id,))
    usr = cursor.fetchone()
    if not usr:
            cursor.execute("INSERT INTO users values (:user_id, :user_name);" ,
            {'user_id':message.from_user.id,
            'user_name':message.from_user.username})
            conn.commit()
    await bot.send_message(message.chat.id,text = f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,{message.from_user.first_name}\n–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',reply_markup = kb.main)

@dp.message_handler(commands=['adm'])
async def send_welcome(message: types.Message):
    if message.from_user.id in admins:
        await bot.send_message(message.chat.id,text = 'success!',reply_markup=kb.adm)


@dp.message_handler(content_types = ['text'])
async def get_text(message: types.message,state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
    if message.text == 'üë• –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞':
        await bot.send_message(message.chat.id,text = '–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ',reply_markup = kb.znak)
    if message.text == '–ü–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É':
        await bot.send_message(message.chat.id,text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç',reply_markup=kb.back)
        await zanketa.z1.set()
    if message.text == '–ê–Ω–∫–µ—Ç—ã':
        await state.update_data(table="acquaintances")
        acquaintances = db.getAllLinks("acquaintances")
        if acquaintances:
            await message.answer_photo(open(f"photo/{acquaintances[0][1]}.jpg", "rb"), f"""<b>
–í–æ–∑—Ä–∞—Å—Ç: <code>{acquaintances[0][4]}</code> 
–ü–æ–ª: <code>{acquaintances[0][5]}</code> 
–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <code>{acquaintances[0][6]}</code> 
–û–±–æ –º–Ω–µ: <code>{acquaintances[0][7]}</code> 
–¶–µ–ª—å –ø–æ–∏—Å–∫–∞: <code>{acquaintances[0][8]}</code> 
</b>""", reply_markup=kb.Links(acquaintances[0][0], 0, "acquaintances"))
        else:
            await message.answer(f"<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–Ω–∫–µ—Ç</b>")
            return
    if message.text == 'üíª –í–∞–∫–∞–Ω—Å–∏–∏':
        ttt = cursor.execute(f"SELECT text FROM ad WHERE id = 1").fetchone()[0]
        await bot.send_message(message.chat.id,text = f'{ttt}')
    if message.text == 'üîé –ò—â—É —Ä–∞–±–æ—Ç—É':
        await message.answer('–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ',reply_markup = kb.findjob)
    if message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç':
        await state.update_data(table="find_job")
        jobs = db.getAllLinks("find_job")
        if jobs:
            await message.answer_photo(open(f"photo/{jobs[0][1]}.jpg", "rb"), f"""<b>
–í–æ–∑—Ä–∞—Å—Ç: <code>{jobs[0][5]}</code> 
–ü–æ–ª: <code>{jobs[0][4]}</code> 
–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <code>{jobs[0][6]}</code> 
–ß–µ–º —Ö–æ—á–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è: <code>{jobs[0][7]}</code> 
–ì–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å: <code>{jobs[0][8]}</code> 
–•–æ—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å: <code>{jobs[0][9]}</code> 

</b>""", reply_markup=kb.Links(jobs[0][0], 0, "find_job"))
        else:
            await message.answer(f"<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–Ω–∫–µ—Ç</b>")
            return
    if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É':
        await bot.send_message(message.chat.id,text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª',reply_markup=kb.back)
        await anketa.q1.set()

@dp.callback_query_handler(lambda call: "next_" in call.data or "back_" in call.data, state="*")
async def callback_alent_n(call: types.callback_query, state: FSMContext):
    state_data = await state.get_data()
    data = call.data.split("_")
    link = db.getCurrentLink(data[1], state_data["table"])
    if state_data["table"] == "find_job":
        text = f"""<b>
–í–æ–∑—Ä–∞—Å—Ç: <code>{link[5]}</code> 
–ü–æ–ª: <code>{link[4]}</code> 
–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <code>{link[6]}</code> 
–ß–µ–º —Ö–æ—á–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è: <code>{link[7]}</code> 
–ì–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å: <code>{link[8]}</code> 
–•–æ—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å: <code>{link[9]}</code> 
</b>"""
    elif state_data["table"] == "acquaintances":
        text = f"""<b>
–í–æ–∑—Ä–∞—Å—Ç: <code>{link[4]}</code> 
–ü–æ–ª: <code>{link[5]}</code> 
–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <code>{link[6]}</code> 
–û–±–æ –º–Ω–µ: <code>{link[7]}</code> 
–¶–µ–ª—å –∞–Ω–∫–µ—Ç—ã: <code>{link[8]}</code> 
</b>"""
    await bot.edit_message_media(media=types.InputMediaPhoto(media=open(f"photo/{link[1]}.jpg", "rb"), caption=text), chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=kb.Links(int(data[1]), int(data[2]), state_data["table"]))

@dp.message_handler(state=zanketa.z1)
async def z1(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    z1 = message.text
    await state.update_data(z1=z1)
    await bot.send_message(message.chat.id,text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª',reply_markup=kb.back)
    await zanketa.z2.set()

@dp.message_handler(state=zanketa.z2)
async def z2(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    z2 = message.text
    await state.update_data(z2=z2)
    await bot.send_message(message.chat.id,text = '–í–∞—à–∞ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?',reply_markup=kb.back)
    await zanketa.z3.set()

@dp.message_handler(state=zanketa.z3)
async def z3(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    z3 = message.text
    await state.update_data(z3=z3)
    await bot.send_message(message.chat.id,text = '–ö–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ',reply_markup=kb.back)
    await zanketa.z4.set()

@dp.message_handler(state=zanketa.z4)
async def z4(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    z4 = message.text
    await state.update_data(z4=z4)
    await bot.send_message(message.chat.id,text = '–ö–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏ –∑–∞—á–µ–º?',reply_markup=kb.back)
    await zanketa.z5.set()

@dp.message_handler(state=zanketa.z5)
async def z5(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    z5 = message.text
    await state.update_data(z5=z5)
    await bot.send_message(message.chat.id,text = '–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º\n[t.me/name]',reply_markup=kb.back)
    await zanketa.z6.set()

@dp.message_handler(state=zanketa.z6)
async def z6(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    z6 = message.text
    await state.update_data(z6=z6)
    await bot.send_message(message.chat.id,text = '–ü—Ä–∏—à–ª–∏—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ',reply_markup=kb.back)
    await zanketa.z7.set()


@dp.message_handler(state=zanketa.z7,content_types=['photo'])
async def z7(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    await message.photo[-1].download(f'photo/{message.from_user.id}.jpg')
    data = await state.get_data()
    age = data.get('z1')
    gender = data.get('z2')
    activity = data.get('z3')
    about = data.get('z4')
    whom_is_he_looking = data.get('z5')
    tg = data.get('z6')
    cursor.execute("INSERT INTO acquaintances ('user_id', 'user_name', 'user_number', 'age', 'gender', 'activity', 'about',  'whom_is_he_looking', 'telegram') values (:user_id, :user_name, :user_number, :age, :gender, :activity, :about, :whom_is_he_looking, :telegram);",
    {'user_id': message.from_user.id,
    'user_name': message.from_user.first_name,
    'user_number':'hidden',
    'age':age,
    'gender':gender,
    'activity':activity,
    'about':about,
    'whom_is_he_looking':whom_is_he_looking,
    'telegram':tg})
    conn.commit()
    await bot.send_message(message.chat.id,text = '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!',reply_markup=kb.main)
    await state.finish()


@dp.message_handler(state=anketa.q1)
async def q1(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    q1 = message.text
    await state.update_data(q1=q1)
    await bot.send_message(message.chat.id,text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç',reply_markup=kb.back)
    await anketa.q2.set()


@dp.message_handler(state=anketa.q2)
async def q2(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    q2 = message.text
    await state.update_data(q2=q2)
    await bot.send_message(message.chat.id,text = '–ß—Ç–æ —É–º–µ–µ—Ç–µ –¥–µ–ª–∞—Ç—å?',reply_markup=kb.back)
    await anketa.q3.set()

@dp.message_handler(state=anketa.q3)
async def q3(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    q3 = message.text
    await state.update_data(q3=q3)
    await bot.send_message(message.chat.id,text = '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å?',reply_markup=kb.back)
    await anketa.q4.set()

@dp.message_handler(state=anketa.q4)
async def q4(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    q4 = message.text
    await state.update_data(q4=q4)
    await bot.send_message(message.chat.id,text = 'C–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å?',reply_markup=kb.back)
    await anketa.q5.set()

@dp.message_handler(state=anketa.q5)
async def q5(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    q5 = message.text
    await state.update_data(q5=q5)
    await bot.send_message(message.chat.id,text = '–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?',reply_markup=kb.back)
    await anketa.q6.set()

@dp.message_handler(state=anketa.q6)
async def q6(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    q6 = message.text
    await state.update_data(q6=q6)
    await bot.send_message(message.chat.id,text = '–°—Å—ã–ª–∫–∞ –Ω–∞ –í–∞—à Telegram\n[t.me/name]',reply_markup=kb.back)
    await anketa.q7.set()

@dp.message_handler(state=anketa.q7)
async def q7(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    q7 = message.text
    await state.update_data(q7=q7)
    await bot.send_message(message.chat.id,text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∫–µ—Ç—ã',reply_markup=kb.back)
    data = await state.get_data()
    age = data.get('q1')
    gender = data.get('q2')
    activity = data.get('q3')
    what_wants = data.get('q4')
    devote_time = data.get('q5')
    earn_money = data.get('q6')
    cursor.execute("INSERT INTO find_job ('user_id', 'user_name', 'user_number', 'age', 'gender', 'activity', 'what_wants', 'devote_time', 'earn_money', 'telegram') values (:user_id, :user_name, :user_number, :age, :gender, :activity, :what_wants, :devote_time, :earn_money, :telegram);",
    {'user_id': message.from_user.id,
    'user_name': message.from_user.first_name,
    'user_number':'hidden',
    'age':age,
    'gender':gender,
    'activity':activity,
    'what_wants':what_wants,
    'devote_time':devote_time,
    'earn_money':earn_money,
    'telegram':message.text})
    conn.commit()
    await anketa.q8.set()

@dp.message_handler(state=anketa.q8,content_types=['photo'])
async def q8(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    await message.photo[-1].download(f'photo/{message.from_user.id}.jpg')
    await bot.send_message(message.chat.id,text = '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!',reply_markup=kb.main)
    await state.finish()


@dp.message_handler(state=banl.nick)
async def ban(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    nick = message.text
    cursor.execute("INSERT INTO users values (:user_id, :user_name);" ,
    {'user_id':'-',
    'user_name':nick})
    conn.commit()
    await state.update_data(nick=nick)
    await bot.send_message(message.chat.id,text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.',reply_markup=kb.main)
    await state.finish()


@dp.message_handler(state=advent.atext)
async def ad(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.main)
            await state.finish()
            return
    atext = message.text
    cursor.execute(f'UPDATE ad SET text = "{atext}" WHERE id = "1"')
    conn.commit()
    await state.update_data(atext=atext)
    await bot.send_message(message.chat.id,text = '–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞',reply_markup=kb.main)
    await state.finish()

@dp.message_handler(state=mailing.text)
async def mtext(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id,text = '–û—Ç–º–µ–Ω–µ–Ω–æ',reply_markup=kb.main)
            await state.finish()
            return
    text = message.text
    await state.update_data(text=text)
    users = cursor.execute("SELECT user_id FROM users")
    print(users)
    for user in users:
        try:
            await bot.send_message(chat_id=user[0],text = f"{text}")
            time.sleep(0.3)
        except:
            print('error')
    await bot.send_message(message.chat.id,text = "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    await state.finish()


@dp.callback_query_handler(lambda c: c.data)
async def ans(call: CallbackQuery,state: FSMContext):
    if call.data == 'stat':
        us = cursor.execute('SELECT Count(*) FROM users').fetchone()[0]
        z = cursor.execute('SELECT Count(*) FROM acquaintances').fetchone()[0]
        f = cursor.execute('SELECT Count(*) FROM find_job').fetchone()[0]
        await bot.send_message(call.message.chat.id,text = f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {us}\n<b>–ê–Ω–∫–µ—Ç –≤ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö:</b> {z}\n<b>–ê–Ω–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ:</b> {f}')
    if call.data == 'ras':
        await bot.send_message(call.message.chat.id,text = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',reply_markup=kb.back)
        await mailing.text.set()
    if call.data == 'ban':
        await bot.send_message(call.message.chat.id,text = '–í–≤–µ–¥–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',reply_markup = kb.back)
        await banl.nick.set()
    if call.data == 'rekl':
        await bot.send_message(call.message.chat.id,text = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏')
        await advent.atext.set()

executor.start_polling(dp)